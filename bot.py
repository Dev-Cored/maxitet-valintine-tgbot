import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.filters import Command, StateFilter
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random as r
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import sqlite3
import hashlib

from database import *

logging.basicConfig(level=logging.INFO)

init_db()

#==========================================================================================================================================
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

BOT_USERNAME = "maxitet_family_valentines_bot"
def gen_ref_url(user_id):
    ref_code = "ref_"+ hashlib.md5(str(user_id).encode()).hexdigest()[:15]
    return f"https://t.me/{BOT_USERNAME}?start={ref_code}"

def gen_ref_code(user_id):
    ref_code = "ref_" + hashlib.md5(str(user_id).encode()).hexdigest()[:15]
    return ref_code

#==========================================================================================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏

def change_text_btn():
    btns = [
        [types.InlineKeyboardButton(text="üé≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π üé≤", callback_data="change_valentine_text")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=btns)
    return keyboard

def menu_keyboard():
    kb = [
        [types.KeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É")],
        [types.KeyboardButton(text="üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
         types.KeyboardButton(text="üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        one_time_keyboard=True
    )

    return keyboard

def y_n_keyboard():
    kb = [
        [
            types.KeyboardButton(text="–î–∞!"),
            types.KeyboardButton(text="–ù–µ—Ç!")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        one_time_keyboard=True
    )
    return keyboard

#==========================================================================================================================================
# –°—Ç–∞—Ç—É—Å—ã

class StatesValentine(StatesGroup):
    waiting_for_username = State()
    waiting_for_valentine_text = State()
    waiting_for_anonimise = State()
    waiting_for_accept = State()

class StatesValentineRef(StatesGroup):
    waiting_for_valentine_text = State()
    waiting_for_anonimise = State()
    waiting_for_accept = State()

#==========================================================================================================================================
# –†–æ—É—Ç–µ—Ä—ã

menu_router = Router()
valentine_create = Router()
ref_valentine_create = Router()
reg_user = Router()

#==========================================================================================================================================
# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞

with open('token.txt') as f:
    TOKEN = f.read().strip()

bot = Bot(token=TOKEN)
dp = Dispatcher()

#==========================================================================================================================================
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command('start'))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    ref_url = gen_ref_code(user_id)

    recently_reg = reg_start_user(user_id, user_name, ref_url)

    args = message.text.split()

    if len(args) > 1:
        ref_code = args[1]
        await message.answer(f"üîó –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!")
        ref_user = check_ref_user_in_db(ref_code)

        if ref_user == None:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–∞ —Å—Å—ã–ª–∫–∞.")
            await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=menu_keyboard())
        else:
            await state.update_data(ref_user_id=ref_user)

            kb = [
                [types.KeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ‚å®Ô∏è")]
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏...")
            await message.answer("–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –≤ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ, –∏–ª–∏ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ", reply_markup=keyboard)

            await state.set_state(StatesValentineRef.waiting_for_anonimise)
            return await ref_valentine_create.message.trigger(message)

        await message

    else:
        if recently_reg:
            await message.answer("üëã –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –±–æ—Ç –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –æ—Ç –∫–∞–Ω–∞–ª–∞ –í –ú–∞–∫—Å–∏—Ç–µ—Ç–µ –õ—é–±—è—Ç!\n"+
                                 "–ü—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä, –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —Ç–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ –∏–ª–∏ –¥—Ä—É–≥—É/–ø–æ–¥—Ä—É–≥–µ.")
            await message.answer("üìî**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–∞ –∫–∞–∫ –º–∏—Ä:\n"+
                                 "‚ù§Ô∏è - –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É `üíå–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É.\n"+
                                 "üì© - –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –Ω–∞–≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É, —á—Ç–æ —Ç—ã —É–∂–µ –∏ —Å–¥–µ–ª–∞–ª")
            await message.answer("‚ÅâÔ∏è**–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"+
                                 "- **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –¥—Ä—É–≥—É/–ø–æ–¥—Ä—É–≥–µ?**\n"+
                                 "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É/–ø–æ–¥—Ä—É–≥–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –µ–≥–æ/–µ–µ —é–∑–µ—Ä–Ω–µ–π–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @), –∞ —Ç–∞–∫ –∂–µ —á—Ç–æ –±—ã –æ–Ω/–æ–Ω–∞ —Ç–∞–∫ –∂–µ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–ª(–∞) –±–æ—Ç–∞. –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–º—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –µ–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'\n\n"+
                                 "- **–ß—Ç–æ –µ—Å–ª–∏ —É –º–µ–Ω—è/—É –º–æ–µ–≥–æ –¥—Ä—É–≥–∞(–ø–æ–¥—Ä—É–≥–∏) –Ω–µ—Ç—É —é–∑–µ—Ä –Ω–µ–π–º–∞?**\n"+
                                 "–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º.")
            await message.answer("üí°**–°–æ–≤–µ—Ç—ã**\n"+
                                 "- –†–∞–∑–º–µ—â–∞–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –≤ —Å–≤–æ–µ–º –¢–ì–ö, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.\n"+
                                 "- –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –Ω–æ –∞–¥—Ä–µ—Å–∞—Ç –Ω–µ –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É –º–∞–∫—Å–∏—Ç–µ—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º—ã –≤–µ–∂–ª–∏–≤–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)")

        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=menu_keyboard())
        return await menu_router.message.trigger(message)


#==========================================================================================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

@menu_router.message(F.text == "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def get_ref(message: types.Message):
    user_id = message.from_user.id
    user_ref = get_user_ref(user_id)
    await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \nhttps://t.me/{BOT_USERNAME}?start={user_ref}")
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=menu_keyboard())

@menu_router.message(F.text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def user_stats(message: types.Message):
    user_id = message.from_user.id
    sent_count, get_count = get_user_stats(user_id)

    await message.answer(f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—É—á–µ–Ω–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ - {get_count}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ - {sent_count}")
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")

@menu_router.message(F.text == "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É")
async def send_valentine(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —é–∑–µ—Ä –Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @). \n–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä –Ω–µ–π–º –∞–¥—Ä–µ—Å–∞—Ç–∞:")
    await state.set_state(StatesValentine.waiting_for_username)
    return await valentine_create.message.trigger(message)

#==========================================================================================================================================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –∏–∑ –º–µ–Ω—é

@valentine_create.message(StatesValentine.waiting_for_username)
async def get_valentine_username_to(message: types.Message, state: FSMContext):
    username = message.text.replace("@", "")
    user_from_id = message.from_user.id
    if username == message.from_user.username:
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ!")
    else:
        await state.update_data(user_from_id=user_from_id)
        await state.update_data(user_name_to=username)
        user_in_db, user_id_for = check_user_id_db(username)
        if user_in_db:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ! –û–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ!")
            await state.update_data(user_in_db=True)
            await state.update_data(user_id_to=user_id_for)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É! –û–Ω –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–ï—Å–ª–∏ —Ç—ã —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, —Ç–æ –ø–∏—à–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É –∫–∞–Ω–∞–ª–∞ –í –ú–∞–∫—Å–∏—Ç–µ—Ç–µ –õ—é–±—è—Ç –∏ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞ —Ç–µ–±—è)")
            await state.update_data(user_in_db=False)

        kb = [
            [types.KeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ‚å®Ô∏è")]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏...")
        await message.answer("–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –≤ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ, –∏–ª–∏ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ", reply_markup=keyboard)
        await state.set_state(StatesValentine.waiting_for_valentine_text)

@valentine_create.message(StatesValentine.waiting_for_valentine_text)
async def get_valentine_text(message: types.Message, state: FSMContext):
    valentine_text = message.text
    if valentine_text == "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ‚å®Ô∏è":
        await state.update_data(valentine_text="generate_auto")
    else:
        await state.update_data(valentine_text=valentine_text)

    kb = [
        [types.KeyboardButton(text="ü•∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ ü•∑")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü–æ–¥–ø–∏—à–∏ —Å–µ–±—è..."
    )
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ, –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É?", reply_markup=keyboard)
    await state.set_state(StatesValentine.waiting_for_anonimise)
    return await valentine_create.message.trigger(message)

@valentine_create.message(StatesValentine.waiting_for_anonimise)
async def get_anonimise(message: types.Message, state: FSMContext):
    anonimise = message.text

    if anonimise == "ü•∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ ü•∑":
        await state.update_data(user_from_name="anonimous")
    else:
        await state.update_data(user_from_name=anonimise)

    valentine_data = await state.get_data()
    user_to = valentine_data['user_name_to']
    valentine_text = valentine_data['valentine_text']
    user_from = valentine_data['user_from_name']

    if valentine_text == "generate_auto":
        valentine_text = valentine_random_text[r.randint(0, len(valentine_random_text)-1)]
        await state.update_data(valentine_text=valentine_text)
        await message.answer(f"–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n–û—Ç: {user_from}\n–ö–æ–º—É: @{user_to}\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}", reply_markup=change_text_btn())
    else:
        await message.answer(f"–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n–û—Ç: {user_from}\n–ö–æ–º—É: @{user_to}\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}")

    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏?", reply_markup=y_n_keyboard())
    await state.set_state(StatesValentine.waiting_for_accept)


@valentine_create.message(StatesValentine.waiting_for_accept)
async def y_or_n_send_valentine(message: types.Message, state: FSMContext):
    print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞")
    text = message.text

    if text == "–î–∞!":
        valentine_data = await state.get_data()
        user_to = valentine_data['user_name_to']
        valentine_text = valentine_data['valentine_text']
        user_from_name = valentine_data['user_from_name']
        send_momental = valentine_data['user_in_db']
        user_id_for = valentine_data['user_id_to']
        user_from_id = valentine_data['user_from_id']

        if user_from_name == "anonimous":
            anonimous = True
        else:
            anonimous = False

        if send_momental:
            send_valentine_to_db(user_from_id, user_to, valentine_text, anonimous, send_momental, user_from_name, user_id_for)
            await bot.send_message(chat_id=user_id_for, text="–¢–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!")
            await message.answer("–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!")


    elif text == "–ù–µ—Ç!":
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞!", reply_markup=menu_keyboard())
        return await menu_router.message.trigger(message)

    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!")

#==========================================================================================================================================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

@ref_valentine_create.message(StatesValentineRef.waiting_for_valentine_text)
async def ref_valentine_text(message: types.Message, state: FSMContext):
    text = message.text

    if text == "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ‚å®Ô∏è":
        await state.update_data(valentine_texts="generate_auto")
    else:
        await state.update_data(valentine_texts=text)

    kb = [
        [types.KeyboardButton(text="ü•∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ ü•∑")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü–æ–¥–ø–∏—à–∏ —Å–µ–±—è..."
    )
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ, –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É?", reply_markup=keyboard)
    await state.set_state(StatesValentineRef.waiting_for_anonimise)

@ref_valentine_create.message(StatesValentineRef.waiting_for_anonimise)
async def ref_user_name_from(message: types.Message, state: FSMContext):
    text = message.text

    if text == "ü•∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ ü•∑":
        await state.update_data(user_name_from="anonimous")
    else:
        await state.update_data(user_name_from=text)

    valentine_data = await state.get_data()
    user_to = valentine_data['ref_user_id']
    valentine_text = valentine_data['valentine_texts']
    user_from = valentine_data['user_from_name']

    if valentine_text == "generate_auto":
        valentine_text = valentine_random_text[r.randint(0, len(valentine_random_text)-1)]
        await state.update_data(valentine_text=valentine_text)
        await message.answer(f"–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n–û—Ç: {user_from}\n–ö–æ–º—É: @{user_to}\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}", reply_markup=change_text_btn())
    else:
        await message.answer(f"–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n–û—Ç: {user_from}\n–ö–æ–º—É: @{user_to}\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}")

    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏?", reply_markup=y_n_keyboard())
    await state.set_state(StatesValentineRef.waiting_for_accept)

@valentine_create.message(StatesValentineRef.waiting_for_accept)
async def y_or_n_send_valentine(message: types.Message, state: FSMContext):
    text = message.text

    if text == "–î–∞!":
        valentine_data = await state.get_data()
        user_to = valentine_data['user_name_to']
        valentine_text = valentine_data['valentine_text']
        user_from = valentine_data['user_from_name']
        send_momental = valentine_data['user_in_db']
        user_id_for = valentine_data['ref_user_id']

        if user_from == "anonimous":
            anonimous = True
        else:
            anonimous = False

        if send_momental:
            send_valentine_to_db(user_from, user_to, valentine_text, anonimous, send_momental,user_from, user_id_for)
            await bot.send_message(chat_id=user_id_for, text=f"–¢–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!\n–û—Ç: {user_from}\n–¢–µ–∫—Å—Ç –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}")
        else:
            send_valentine_to_db(user_from, user_to, valentine_text, anonimous, send_momental, user_from, user_id_for)
            await message.answer("–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –µ–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞!")
    elif text == "–ù–µ—Ç!":
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞!", reply_markup=menu_keyboard())
        return await menu_router.message.trigger(message)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!")

#==========================================================================================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫

@dp.callback_query(F.data == "change_valentine_text")
async def change_valentine_text(call: types.CallbackQuery, state: FSMContext):
    # print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞")
    valentine_data = await state.get_data()
    user_to = valentine_data['user_name_to']
    user_from = valentine_data['user_from_name']

    valentine_text = valentine_random_text[r.randint(0, len(valentine_random_text)-1)]
    await state.update_data(valentine_text=valentine_text)

    await call.message.edit_text(f"–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n–û—Ç: {user_from}\n–ö–æ–º—É: @{user_to}\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ: {valentine_text}", reply_markup=change_text_btn())
    await call.answer()



#==========================================================================================================================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

async def main():
    dp.include_router(menu_router)
    dp.include_router(valentine_create)
    dp.include_router(ref_valentine_create)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
